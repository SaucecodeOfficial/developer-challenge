// trigger tree shaking
import {
  addIndex,
  and,
  append,
  compose,
  concat,
  contains,
  dropLast,
  endsWith,
  equals,
  filter,
  find,
  findIndex,
  flatten,
  forEach,
  forEachObjIndexed,
  fromPairs,
  groupBy,
  gt,
  gte,
  has,
  hasIn,
  head,
  isEmpty,
  isNil,
  keys,
  keysIn,
  last,
  length,
  lt,
  lte,
  map,
  mapObjIndexed,
  merge,
  mergeAll,
  mergeDeepRight,
  not,
  omit,
  or,
  path,
  pickAll,
  pickBy,
  pipe,
  pluck,
  prepend,
  prop,
  propEq,
  range,
  reduce,
  sum,
  sort,
  sortBy,
  sortWith,
  descend,
  ascend,
  reverse,
  split,
  startsWith,
  tail,
  take,
  takeLast,
  toLower,
  toPairs,
  toString,
  trim,
  tryCatch,
  type,
  uniq,
  values,
} from 'ramda'
import {
  camelCase,
  constantCase,
  dotCase,
  headerCase,
  isLowerCase,
  isUpperCase,
  lowerCase,
  lowerCaseFirst,
  noCase,
  paramCase,
  pascalCase,
  pathCase,
  sentenceCase,
  snakeCase,
  swapCase,
  titleCase,
  upperCase,
  upperCaseFirst,
} from 'change-case'
import {
  html,
  safeHtml,
  oneLine,
  oneLineTrim,
  stripIndent,
  stripIndents,
  inlineLists,
  oneLineInlineLists,
  commaLists,
  oneLineCommaLists,
} from 'common-tags'

const isType = (subject, matcher) => equals(type(subject), matcher)

const TASK = {
  addIndex,
  and,
  append,
  compose,
  concat,
  contains,
  dropLast,
  endsWith,
  equals,
  eq: equals,
  filter,
  find,
  findIndex,
  flatten,
  forEach,
  forEachObjIndexed,
  fromPairs,
  groupBy,
  gt,
  gte,
  has,
  hasIn,
  head,
  isEmpty,
  isNil,
  keys,
  keysIn,
  last,
  length,
  lt,
  lte,
  map,
  mapIndexed: addIndex(map),
  mapObjIndexed,
  merge,
  mergeAll,
  mergeDeepRight,
  not,
  omit,
  or,
  path,
  pickAll,
  pickBy,
  pipe,
  pluck,
  prepend,
  prop,
  propEq,
  range,
  reduce,
  sum,
  sort,
  sortBy,
  sortWith,
  descend,
  ascend,
  reverse,
  split,
  startsWith,
  tail,
  take,
  takeLast,
  toLower,
  toPairs,
  toString,
  trim,
  tryCatch,
  type,
  uniq,
  values,
  isType,
  notType: (subject, type) => not(isType(subject, type)),
  isZeroLen: subject => equals(length(subject), 0),
  valPipe: val => (...args) => pipe(...args)(val),
  caseTo: {
    camelCase,
    constantCase,
    dotCase,
    headerCase,
    isLowerCase,
    isUpperCase,
    lowerCase,
    lowerCaseFirst,
    noCase,
    paramCase,
    pascalCase,
    pathCase,
    sentenceCase,
    snakeCase,
    swapCase,
    titleCase,
    upperCase,
    upperCaseFirst,
  },
  tags: {
    html,
    safeHtml,
    oneLine,
    oneLineTrim,
    stripIndent,
    stripIndents,
    inlineLists,
    oneLineInlineLists,
    commaLists,
    oneLineCommaLists,
  }
}

const of = function to(promise) {
  return promise
    .then(result => [ null, result ])
    .catch(err => [ err, null ])
}

export function task(factory) {
  return factory(TASK, { of })
}